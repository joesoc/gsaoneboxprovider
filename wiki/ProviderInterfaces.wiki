#summary Interfaces to implement a concrete provider for a content source.
#labels Provider,Interface,OneBox

= Introduction =

The GSA OneBox Provider acts as a small framework to easily implement a concrete provider for a content source. To do that there are only two slim interfaces to implement. 

All implementations should be put to package 'com.qperior.gsa.oneboxprovider.implementations'. A pretty easy example can be found with the dummy provider located in package 'com.qperior.gsa.oneboxprovider.implementations.dummy'.

= Details =

One interface represents the provider itself ('QPIProvider') and the other encapsulates all security features of the provider ('QPISecurityProvider').

It might be a good idea to combine both to one interface; but at the moment I decided to separate them.

==Provider interface==
It can be found in package 'com.qperior.gsa.oneboxprovider.provider' together with a abstract class which implements the interface ('QPAbstractProvider'). Therefore in normal case you will implement the abstract class. 

There are only three methods to implement:
  * public QPIOneBoxResults provideOneBoxResults() 
  * public String getProviderName()
  * public String toString()

==SecurityProvider interface==
It can be found in package 'com.qperior.gsa.oneboxprovider.security' together with a abstract class which implements the interface ('QPAbstractSecurityProvider'). Therefore in normal case you will implement the abstract class.

There is only one method to implement:
  * public List getSupportedAuthTypes()

The security interface has to be redesigned.
See known issues about some thoughts about implementing security here.

==Create your own implementation==

To create your own implementation for a content source just follow these steps:
  * Create a package under 'com.qperior.gsa.oneboxprovider.implementations'
  * implement the two interfaces
  * change the configuration to the  new interfaces (see wiki page [Configuration])
  * build and deploy it (see wiki page [SettingUpTheProject])